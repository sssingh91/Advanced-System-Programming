1) Can be run by using makefile by typing make in terminal.
2) By using 'make' binary file will be created by the name 'trans'.
3) File can be run by using following command line: './trans Input.txt 5', where Input.txt is the input file and 5 is number of threads.



-----------program details------------------------

-> For every transaction, new thread is created.

-> The number of thread is limited by either thread given through terminal or by number of transaction whichever is less.

-> number of philosopher = number of threads.

-> While creating thread (or philosopher), transfer parameter (containing amount to be transferred and account numbers of account to be credited and debited) is sent.

-> In the thread/worker function/philosopher , thread can only continue when acquires both the forks/locks (associated with credit and debit account).

-> Once both lock/mutex is acquired transfer proceeds and then both locks/forks are released.

-> Every account is given its lock and when a philosopher/worker function executes first the lock having lower numerical value is acquired. This is to avoid circular dependency and deadlock situation.
Ex- 
Transfer 1 2 200
Transfer 2 1 100

In the above case if numerical order of acquiring lock is not followed, thead 1 will acquire lock 1 and at the same time thread 2/philosopher 2 can aquire lock 2 and both the threads 1 & 2 waits for lock 2 and lock 1 respectively.  	 
Therefore, in case of following numerical order, always both threads will try to acquire lock 1 and then lock 2.So, after one thread acquires it will complete the operation and release the resources and then the next thread can execute.

-> Program modification for startvation is not done as the given problem will not lead to startvation because of following reasons:
	a) Since we are creating limited number of threads and program is not continuously running, its completing after execution and hence all the threads are termiated.
	b) worker threads have similar amount of work and both processor cores are running at same speed. 
